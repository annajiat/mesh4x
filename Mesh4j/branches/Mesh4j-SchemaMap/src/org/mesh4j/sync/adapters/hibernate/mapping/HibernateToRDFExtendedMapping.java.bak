package org.mesh4j.sync.adapters.hibernate.mapping;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.dom4j.Element;
import org.mesh4j.sync.adapters.feed.ISyndicationFormat;
import org.mesh4j.sync.payload.schema.rdf.CompositeProperty;
import org.mesh4j.sync.payload.schema.rdf.IRDFSchema;
import org.mesh4j.sync.payload.schema.rdf.RDFInstance;
import org.mesh4j.sync.validations.Guard;

import com.hp.hpl.jena.rdf.model.Resource;

public class HibernateToRDFExtendedMapping extends HibernateToRDFMapping {
/*	
	//field name <-> field data-type (XSD.xstring, XSD.integer, XSD.date etc)
	private Map<String, Resource> syncSchema;
	
	//original field name <-> field name of base schema to map with
	private Map<String, String> schemaConvertMap;
	
	private Map<String, String> schemaRevertMap;*/
	
	
	public HibernateToRDFExtendedMapping(IRDFSchema rdfSchema,
			Map<String, Resource> syncSchema, Map<String, String> schemaConversionMap) {
		super(rdfSchema);
		Guard.argumentNotNull(syncSchema, "syncSchema");
		Guard.argumentNotNull(schemaConversionMap, "schemaConversionMap");
		
/*		this.syncSchema = syncSchema;
		this.schemaConvertMap = schemaConversionMap;
		
		//reverse each key-value pair to value-key pair
		schemaRevertMap = new HashMap<String, String>();
		for(Entry<String, String> e : schemaConversionMap.entrySet()){
			schemaRevertMap.put(e.getValue(),e.getKey());
		}*/
	}
	
	@Override
	public Element convertRowToXML(String meshId, Element element) throws Exception {
		RDFInstance instance = null;
				
		if(this.rdfSchema.hasCompositeId()){
			instance = this.rdfSchema.createNewInstanceFromPlainXML(meshId, element, FORMATS, new String[]{"id"}); 
		} else {
			instance = this.rdfSchema.createNewInstanceFromPlainXML(meshId, element, FORMATS/*, syncSchema, schemaConvertMap*/); 
		}
		return instance.asElementRDFXML();
	}

	@Override
	public Element convertXMLToRow(Element element) throws Exception {
		Element rdfXml;
		if(ISyndicationFormat.ELEMENT_PAYLOAD.equals(element.getName())){
			Element rdfElement = element.element(IRDFSchema.ELEMENT_RDF);
			if(rdfElement == null){
				Guard.throwsArgumentException("payload");
			}
			rdfXml = rdfElement;
		} else {
			rdfXml = element;
		}
		RDFInstance instance = this.rdfSchema.createNewInstanceFromRDFXML(rdfXml/*, syncSchema, schemaRevertMap*/);
		
		if(this.rdfSchema.hasCompositeId()){
			CompositeProperty compositeId = new CompositeProperty("id", this.rdfSchema.getIdentifiablePropertyNames());			
			return instance.asElementPlainXml(FORMATS, new CompositeProperty[]{compositeId});
		} else {
			return instance.asElementPlainXml(FORMATS, null);
		}
	}

	@Override
	public String getMeshId(Element entityElement) {
		if(entityElement == null){
			return null;
		}

		Element element = entityElement;
		if(this.rdfSchema.hasCompositeId()){
			element = entityElement.element("id");
		}
		
		List<String> idValues = new ArrayList<String>();
		String idCellValue;
		List<String> idColumnNames = this.rdfSchema.getIdentifiablePropertyNames();
		for (String idColumnName : idColumnNames) {
			Element idElement = element.element(idColumnName);
			if(idElement == null){
				return null;
			}
			idCellValue = idElement.getText();
			if(idCellValue == null){
				return null;
			} else {
				idValues.add(idCellValue);
			}
		}
		return makeId(idValues);	
	}

	
}
